name: Release Hisame Alpha Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 0.1.0)'
        required: true
        default: '0.1.0'
      prerelease:
        description: 'Is this a prerelease?'
        type: boolean
        required: true
        default: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ github.event.inputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -a v${{ github.event.inputs.version }} -m "Release v${{ github.event.inputs.version }}"
          git push origin v${{ github.event.inputs.version }}

      - name: Build release body
        id: release_body
        run: |
          VERSION="v${{ github.event.inputs.version }}"
          RAW_CHANGELOG=$(awk "/## \\[${VERSION#v}\\]/,/^## \\[/" CHANGELOG.md | sed '$d')
          
          # Read template and inject version + changelog
          TEMPLATE=$(cat .github/release_template.md)
          FINAL_BODY=$(echo "$TEMPLATE" | sed "s/{{VERSION}}/${VERSION}/g")
          FINAL_BODY=$(echo "$FINAL_BODY" | sed "/{{CHANGELOG}}/{
            r /dev/stdin
            d
          }" <<< "$RAW_CHANGELOG")

          echo "$FINAL_BODY" > RELEASE_BODY.md

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Hisame v${{ github.event.inputs.version }}-alpha
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          body_path: RELEASE_BODY.md

  build:
    needs: create-release
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: linux-amd64
            binary_name: hisame
            asset_name: hisame-${{ needs.create-release.outputs.version }}-linux-amd64
          - os: ubuntu-latest
            target: linux-arm64
            binary_name: hisame
            asset_name: hisame-${{ needs.create-release.outputs.version }}-linux-arm64
          - os: macos-latest
            target: darwin-amd64
            binary_name: hisame
            asset_name: hisame-${{ needs.create-release.outputs.version }}-darwin-amd64
          - os: macos-latest
            target: darwin-arm64
            binary_name: hisame
            asset_name: hisame-${{ needs.create-release.outputs.version }}-darwin-arm64
          - os: windows-latest
            target: windows-amd64
            binary_name: hisame.exe
            asset_name: hisame-${{ needs.create-release.outputs.version }}-windows-amd64.exe

    runs-on: ${{ matrix.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          check-latest: true

      - name: Get dependencies
        run: go mod download

      # Set environment variables based on matrix target
      - name: Set up environment for cross-compilation
        shell: bash
        run: |
          if [[ "${{ matrix.target }}" == "linux-amd64" ]]; then
            echo "GOOS=linux" >> $GITHUB_ENV
            echo "GOARCH=amd64" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == "linux-arm64" ]]; then
            echo "GOOS=linux" >> $GITHUB_ENV
            echo "GOARCH=arm64" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == "darwin-amd64" ]]; then
            echo "GOOS=darwin" >> $GITHUB_ENV
            echo "GOARCH=amd64" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == "darwin-arm64" ]]; then
            echo "GOOS=darwin" >> $GITHUB_ENV
            echo "GOARCH=arm64" >> $GITHUB_ENV
          elif [[ "${{ matrix.target }}" == "windows-amd64" ]]; then
            echo "GOOS=windows" >> $GITHUB_ENV
            echo "GOARCH=amd64" >> $GITHUB_ENV
          fi

      # Inject build version
      - name: Inject version
        shell: bash
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          BUILD_TIME=$(date -u '+%Y-%m-%d_%H:%M:%S')
          
          # Use linker flags to inject version info
          echo "VERSION_FLAGS=-X 'github.com/PizzaHomicide/hisame/internal/version.Version=$VERSION' -X 'github.com/PizzaHomicide/hisame/internal/version.BuildTime=$BUILD_TIME'" >> $GITHUB_ENV

      # Build the binary
      - name: Build
        run: go build -v -ldflags "${{ env.VERSION_FLAGS }}" -o ${{ matrix.binary_name }} ./cmd/hisame

      # Create archive for non-Windows platforms
      - name: Create archive (non-Windows)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          tar czf ${{ matrix.asset_name }}.tar.gz ${{ matrix.binary_name }}

      # Create ZIP for Windows platform
      - name: Create archive (Windows)
        if: matrix.os == 'windows-latest'
        shell: bash
        run: |
          7z a -tzip ${{ matrix.asset_name }}.zip ${{ matrix.binary_name }}

      # Upload archives to the release
      - name: Upload Release Asset (non-Windows)
        if: matrix.os != 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.asset_name }}.tar.gz
          fail_on_unmatched_files: true

      # Upload archive (Windows)
      - name: Upload Release Asset (Windows)
        if: matrix.os == 'windows-latest'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.create-release.outputs.version }}
          files: ./${{ matrix.asset_name }}.zip
          fail_on_unmatched_files: true